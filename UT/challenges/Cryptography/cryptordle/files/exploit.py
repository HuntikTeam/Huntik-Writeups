from pwn import *

conn = remote('betta.utctf.live', 7496)
conn.recvline()

for h in range(3):
	
	conn.sendline(b'aaaaa')
	res1 = int(conn.recvline().decode().strip("\r\n"))
	print(res1)

	conn.recvline()
	conn.sendline(b'baaaa')
	res2 = int(conn.recvline().decode().strip("\r\n"))
	print(res2)

	conn.recvline()
	conn.sendline(b'abaaa')
	res3 = int(conn.recvline().decode().strip("\r\n"))
	print(res3)

	conn.recvline()
	conn.sendline(b'aabaa')
	res4 = int(conn.recvline().decode().strip("\r\n"))
	print(res4)

	conn.recvline()
	conn.sendline(b'aaaba')
	res5 = int(conn.recvline().decode().strip("\r\n"))
	print(res5)


	symb1 = '0'
	symb2 = '0'
	symb3 = '0'
	symb4 = '0'
	symb5 = '0'

	fin = (res1*(-1))%31
	print(fin)

	for i in range(26):

		if (i*(res2-res1)) % 31 == fin:
			symb1 = chr(i+ord('a'))
			print("1: " + str(symb1))

		if (i*(res3-res1)) % 31 == fin:
			symb2 = chr(i+ord('a'))
			print("2: " + str(symb2))

		if (i*(res4-res1)) % 31 == fin:
			symb3 = chr(i+ord('a'))
			print("3: " + str(symb3))

		if (i*(res5-res1)) % 31 == fin:
			symb4 = chr(i+ord('a'))
			print("4: " + str(symb4))

	for i in range(26):
		multi = i*(ord(symb1)-ord('a'))
		multi = multi * (ord(symb2)-ord('a'))
		multi = multi * (ord(symb3)-ord('a'))
		multi = multi * (ord(symb4)-ord('a'))

		if multi % 31 == fin:
			symb5 = chr(i+ord('a'))
			print("5: " + str(symb5))

	word = symb1 + symb2 + symb3 + symb4 + symb5
	print(word)
	conn.sendline(word.encode())

	print(conn.recvline())
	print(conn.recvline())
	print(conn.recvline())


print(conn.recvall())
conn.close()

#utflag{sometimes_pure_guessing_is_the_strat}