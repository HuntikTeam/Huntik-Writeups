from pwn import *
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
import time

def get_random_number(seed):
    seed = int(str(seed * seed).zfill(12)[3:9])
    return seed

def encrypt(message):
    key = b''
    for i in range(8):
        key += (get_random_number() % (2 ** 16)).to_bytes(2, 'big')
    cipher = AES.new(key, AES.MODE_ECB)
    ciphertext = cipher.encrypt(pad(message, AES.block_size))
    return ciphertext.hex()

def decrypt(message, seed):

	key = b''
	for i in range(8):
		seed = get_random_number(seed)
		key += (seed % (2 ** 16)).to_bytes(2, 'big')

	cipher = AES.new(key, AES.MODE_ECB)

	plaintext = cipher.decrypt(message)
	return plaintext

def generateSampleSize():
	for i in range(1000):
		conn = remote('betta.utctf.live', 7356)
		f = open('ciphertexts.txt', 'a')

		conn.recvuntil(b'?')
		conn.sendline(b'1')
		conn.recvuntil(b': ')

		encrypted = conn.recvline().decode()
		#print(encrypted)
		f.write(encrypted)

		conn.close()

	f.close()

#generateSampleSize()

for i in range(10 ** 6):

	g = open('ciphertexts.txt','r')
	lines = g.readlines()

	for line in lines:
		ct = bytes.fromhex(line.strip("\r\n"))

		pt = decrypt(ct, i)

		if b'utflag' in pt:
			print(pt)

#utflag{deep_seated_and_recurring_self-doubts}